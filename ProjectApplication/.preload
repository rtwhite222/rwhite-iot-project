-- SECTION RELATING TO DATABASE CREATION
su=require"sqlutil" -- Load SQL utility library
local sqlQueries = require("ProjectApplication.lua.sqlQuery") -- loads custom query builder function list
if not su.exist"file" then
   -- Create a database environment object and open data/file.sqlite.db
   local env,conn = su.open"file"
   local sql="CREATE TABLE company(CompanyName   varchar(20) NOT NULL,"
 .."street        text(10)    NOT NULL,"
 .."city          text(6)     NOT NULL,"
 .."postc         text(7)     NOT NULL,"
 .."email         text(30)    NOT NULL,"
 .."ContactNumber text(15)    NOT NULL,"
 .."CONSTRAINT c1 PRIMARY KEY(CompanyName));"
 
 local ok,err=conn:execute(sql)
    if ok then 
      print("Database file created in ",su.dir())
      print("Company Table created")
    else
      trace("Creating DB failed",err)
    end
    
    sql ="CREATE TABLE permissions(PermissionLevel varchar(255),"
 .."viewAllDevices        int NOT NULL,"
 .."viewAllUsers          int NOT NULL,"
 .."changeUserSettings    int NOT NULL,"
 .."viewCompanyUsers      int NOT NULL,"
 .."addNewNonCompanyUsers int NOT NULL,"
 .."addCompanyUsers       int NOT NULL,"
 .."addNewCompany         int NOT NULL,"
 .."addNewDevice          int NOT NULL,"
 .."changeDeviceSettings  int NOT NULL,"
 .."CONSTRAINT c2 PRIMARY KEY(PermissionLevel));"
 
 ok,err=conn:execute(sql)
    if ok then 
      print("Permissions Table Created")
    else
      trace("Creating permissions table failed ",err)
    end
    

 sql ="CREATE TABLE users(UserID INTEGER PRIMARY KEY AUTOINCREMENT,"
 .."username        text(255)    UNIQUE NOT NULL,"
 .."password        text(255)    NOT NULL,"
 .."PasswordExpiry  date        NOT NULL,"
 .."CompanyName     varchar(255) NOT NULL,"
 .."ContactNumber   text(255),"
 .."email           text(255),"
 .."PermissionLevel varchar(255)         NOT NULL,"
 .."CONSTRAINT c3 FOREIGN KEY(CompanyName) "
 .."REFERENCES company(CompanyName) ON DELETE CASCADE ON UPDATE CASCADE,"
 .."CONSTRAINT c4 FOREIGN KEY(PermissionLevel) "
 .."REFERENCES permissions(PermissionLevel) ON DELETE CASCADE ON UPDATE CASCADE);"
 
 ok,err=conn:execute(sql)
    if ok then 
      print("Users table created")
    else
      trace("Creating users table failed ",err)
    end
 
 sql="CREATE TABLE device"
 .."(deviceIP varchar(50) NOT NULL,"
 .."companyName varchar(20) NOT NULL,"
 .."deviceModel  text(20) NOT NULL,"
 .."MaintenanceDate date,"
 .."CONSTRAINT c5 PRIMARY KEY(deviceIP),"
 .."CONSTRAINT c6 FOREIGN KEY(companyName) "
 .."REFERENCES company(companyName)"
 .."ON UPDATE CASCADE ON DELETE CASCADE);"
 
 ok,err=conn:execute(sql)
    if ok then 
      print("Device table created")
    else
      trace("Creating device table failed ",err)
    end
 
 sql="CREATE TABLE operatingSettings"
 .."(settingNo int NOT NULL,"
 .."deviceInput1 int NOT NULL,"
 .."deviceInput2 int,"
 .."CONSTRAINT c7 PRIMARY KEY(settingNo));"
 
 ok,err=conn:execute(sql)
    if ok then 
      print("operating settings table created")
    else
      trace("Creating operating settings table failed ",err)
    end
 
 sql="CREATE TABLE userlogs"
 .."(username varchar(255) NOT NULL,"
 .."time date NOT NULL,"
 .."message text(255),"
 .."CONSTRAINT c8 PRIMARY KEY(username,time),"
 .."CONSTRAINT c9 FOREIGN KEY(username) "
 .."REFERENCES company(username));"
 
 ok,err=conn:execute(sql)
    if ok then 
      print("user logs table created")
    else
      trace("Creating user logs table failed ",err)
    end
    
    
    
    
    
    sql="INSERT INTO company VALUES('Chameleon','Tuam Business Park, Weir Road','Tuam','H54 CH79','sales@chameleon.ie','+353 93 25392');"

   
  ok, err = conn:execute(sql)
    if ok then 
        print("Root company created")
    else
        trace("Root company create failed")
    end
    
    sql="INSERT INTO permissions VALUES('Root',1,1,1,1,1,1,1,1,1);"

   
  ok, err = conn:execute(sql)
    if ok then 
        print("Permission Settings created")
    else
        trace("Permission Settings create failed")
    end
    sql="INSERT INTO permissions VALUES('Technical User',1,1,0,1,0,1,1,1,1);"

   
  ok, err = conn:execute(sql)
    if ok then 
        print("Permission Settings created")
    else
        trace("Permission Settings create failed")
    end
    
    sql = "INSERT INTO users(username,password,PasswordExpiry,CompanyName,ContactNumber,Email,permissionlevel)"
     .. "VALUES('root','COM810',0,'Chameleon','000000000','testtest123@gmail.com','Root');"
    
    ok, err = conn:execute(sql)
    if ok then 
        print("Root user created")
    else
        trace("Root user create failed")
    end
    
    su.close(env,conn)
end

 -- SECTION RELATING TO SERVER SIDE BROKER CREATION FOR THE FACILITATION OF H2M & M2M COMMUNICATION
local smq = require("smqbroker").create()
trace(os.time())
local function smqEntry(_ENV)
   trace("New SMQ client")
   smq.connect(request)
   trace(request)
   trace"check"
end
if not _G.mySmqBrokerDir then
    local smqDir = ba.create.dir("Server-Broker-Test8")
    smqDir:setfunc(smqEntry)
    smqDir:insert()
    trace("Installing broker entry at:",smqDir:baseuri())
    
    --if _G.mySmqBrokerDir then
    --   trace"Removing old broker"
    --   _G.mySmqBrokerDir:unlink()
    --end
    trace(mySmqBrokerDir)
    _G.mySmqBrokerDir = smqDir
end
trace(mySmqBrokerDir)
local function check(notUsed,ptid)
    trace"hi"
end
trace(mySmqBrokerDir)
local function checkthesecond(thisisused,ptid)
    trace(ptid)
end

smq.subscribe("/m2m/led/display", {onmsg=check});
smq.subscribe("/m2m/led/device", {onmsg=checkthesecond});